// <auto-generated />
using System;
using System.Collections.Generic;
using AdvSearcher.Persistance.SQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdvSearcher.Persistance.SQLite.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("AdvSearcher.Core.Entities.AdvertisementAttachments.AdvertisementAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<ulong>("AdvertisementId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Url", "AdvSearcher.Core.Entities.AdvertisementAttachments.AdvertisementAttachment.Url#AdvertisementAttachmentSourceUrl", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AdvSearcher.Core.Entities.Advertisements.Advertisement", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Content", "AdvSearcher.Core.Entities.Advertisements.Advertisement.Content#AdvertisementContent", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("CreationDate", "AdvSearcher.Core.Entities.Advertisements.Advertisement.CreationDate#CreationDate", b1 =>
                        {
                            b1.Property<DateOnly>("Date")
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Date", "AdvSearcher.Core.Entities.Advertisements.Advertisement.Date#AdvertisementPublishedDate", b1 =>
                        {
                            b1.Property<DateOnly>("Value")
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ServiceName", "AdvSearcher.Core.Entities.Advertisements.Advertisement.ServiceName#AdvertisementServiceName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ServiceName")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Type", "AdvSearcher.Core.Entities.Advertisements.Advertisement.Type#AdvertisementType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Url", "AdvSearcher.Core.Entities.Advertisements.Advertisement.Url#AdvertisementUrl", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("AdvSearcher.Core.Entities.Publishers.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<bool>("IsIgnored")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Data", "AdvSearcher.Core.Entities.Publishers.Publisher.Data#PublisherData", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("AdvSearcher.Core.Entities.ServiceUrls.ServiceUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.ComplexProperty<Dictionary<string, object>>("Mode", "AdvSearcher.Core.Entities.ServiceUrls.ServiceUrl.Mode#ServiceUrlMode", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Mode")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Service", "AdvSearcher.Core.Entities.ServiceUrls.ServiceUrl.Service#ServiceUrlService", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Value", "AdvSearcher.Core.Entities.ServiceUrls.ServiceUrl.Value#ServiceUrlValue", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("Id");

                    b.ToTable("ServiceUrls");
                });

            modelBuilder.Entity("AdvSearcher.Core.Entities.AdvertisementAttachments.AdvertisementAttachment", b =>
                {
                    b.HasOne("AdvSearcher.Core.Entities.Advertisements.Advertisement", "Advertisement")
                        .WithMany("Attachments")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("AdvSearcher.Core.Entities.Advertisements.Advertisement", b =>
                {
                    b.HasOne("AdvSearcher.Core.Entities.Publishers.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("AdvSearcher.Core.Entities.Advertisements.Advertisement", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
